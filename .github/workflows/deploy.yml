name: Deploy
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To push a branch
      pull-requests: write # To create a PR from that branch
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install latest mdbook
        run: |
          tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir mdbook
          curl -sSL $url | tar -xz --directory=./mdbook
          echo `pwd`/mdbook >> $GITHUB_PATH
      - name: Deploy GitHub Pages
        run: |
          # This assumes your book is in the root of your repository.
          # Just add a `cd` here if you need to change to another directory.
          mdbook build
          git worktree add gh-pages
          git config user.name "Deploy from CI"
          git config user.email ""
          cd gh-pages
          # Delete the ref to avoid keeping history.
          git update-ref -d refs/heads/gh-pages
          rm -rf *
          mv ../book/* .
          git add .
          git commit -m "Deploy $GITHUB_SHA to gh-pages"
          git push --force --set-upstream origin gh-pages
          
      - name: Setup AWS CLI credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.S3_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.S3_SECRET_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = ${{ secrets.S3_REGION }}" >> ~/.aws/config
          # Disable warning messages for insecure requests
          export AWS_CLI_AUTO_PROMPT=on-partial
          
      - name: Install OBS client
        run: |
          pip install esdk-obs-python
          
      - name: Deploy to Huawei Cloud OBS
        run: |
          # Navigate to where the built files are
          cd gh-pages
          
          # Create Python script for uploading to OBS
          cat > upload_to_obs.py << 'EOF'
          import os
          import sys
          from obs import ObsClient

          # Get secrets from environment
          access_key = os.environ.get('S3_ACCESS_KEY')
          secret_key = os.environ.get('S3_SECRET_KEY')
          endpoint = os.environ.get('S3_ENDPOINT_URL')
          bucket_name = os.environ.get('S3_BUCKET_NAME')

          # Initialize OBS client
          obsClient = ObsClient(
              access_key_id=access_key,
              secret_access_key=secret_key, 
              server=endpoint
          )

          # Check if bucket exists
          resp = obsClient.headBucket(bucket_name)
          if resp.status < 300:  # Success
              print(f"Bucket {bucket_name} exists, starting upload...")
          else:
              print(f"Error: Bucket {bucket_name} does not exist or is not accessible")
              print(f"Response status: {resp.status}, reason: {resp.reason}")
              sys.exit(1)

          # Walk through directory and upload files
          for root, dirs, files in os.walk('.'):
              # Skip .git directory
              if '.git' in root:
                  continue
                  
              for file in files:
                  # Skip certain file types
                  if file.endswith(('.ttf', '.eot', '.svg')) or file == 'upload_to_obs.py':
                      continue
                      
                  local_path = os.path.join(root, file)
                  # Remove leading ./ for object key
                  object_key = local_path[2:] if local_path.startswith('./') else local_path
                  
                  # Upload file
                  print(f"Uploading {local_path} to {object_key}")
                  resp = obsClient.putFile(bucket_name, object_key, local_path)
                  if resp.status >= 300:
                      print(f"Failed to upload {local_path}: {resp.reason}")
                      
          print("Upload completed.")
          EOF
          
          # Run the Python script with secrets passed as environment variables
          S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}" \
          S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}" \
          S3_ENDPOINT_URL="${{ secrets.S3_ENDPOINT_URL }}" \
          S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
          python upload_to_obs.py
          
          echo "Successfully deployed to Huawei Cloud OBS"
