name: Deploy
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To push a branch
      pull-requests: write # To create a PR from that branch
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install latest mdbook
        run: |
          tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir mdbook
          curl -sSL $url | tar -xz --directory=./mdbook
          echo `pwd`/mdbook >> $GITHUB_PATH
      - name: Deploy GitHub Pages
        run: |
          # This assumes your book is in the root of your repository.
          # Just add a `cd` here if you need to change to another directory.
          mdbook build
          git worktree add gh-pages
          git config user.name "Deploy from CI"
          git config user.email ""
          cd gh-pages
          # Delete the ref to avoid keeping history.
          git update-ref -d refs/heads/gh-pages
          rm -rf *
          mv ../book/* .
          git add .
          git commit -m "Deploy $GITHUB_SHA to gh-pages"
          git push --force --set-upstream origin gh-pages
          
      - name: Setup AWS CLI  
        run: |
          pip install awscli
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.S3_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.S3_SECRET_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = ${{ secrets.S3_REGION }}" >> ~/.aws/config
          
      - name: Deploy to S3-compatible storage with progress
        run: |
          # Navigate to where the built files are
          cd gh-pages
          
          # Print bucket name for verification (with secrets masked)
          echo "Using bucket: ${S3_BUCKET_NAME_MASKED}"
          echo "Using endpoint: ${S3_ENDPOINT_URL_MASKED}"
          
          # Verify bucket exists
          echo "Verifying bucket exists..."
          if aws s3 ls "s3://${{ secrets.S3_BUCKET_NAME }}/" \
            --endpoint-url=${{ secrets.S3_ENDPOINT_URL }} \
            --no-verify-ssl; then
            echo "✅ Bucket exists and is accessible"
          else
            echo "❌ Bucket does not exist or is not accessible"
            exit 1
          fi
          
          # First, remove all existing files in the bucket to ensure clean deployment
          echo "Clearing existing files from bucket..."
          aws s3 rm "s3://${{ secrets.S3_BUCKET_NAME }}/" \
            --recursive \
            --endpoint-url=${{ secrets.S3_ENDPOINT_URL }} \
            --no-verify-ssl
          
          # Sync all files to S3 bucket with progress reporting
          echo "Uploading files to S3-compatible storage..."
          aws s3 sync . "s3://${{ secrets.S3_BUCKET_NAME }}/" \
            --exclude ".git/*" \
            --endpoint-url=${{ secrets.S3_ENDPOINT_URL }} \
            --no-verify-ssl \
            --debug
            
          echo "Successfully deployed to S3-compatible storage"
        env:
          # Mask sensitive data in logs but still make output readable
          S3_BUCKET_NAME_MASKED: "${{ secrets.S3_BUCKET_NAME }}"
          S3_ENDPOINT_URL_MASKED: "${{ secrets.S3_ENDPOINT_URL }}"
