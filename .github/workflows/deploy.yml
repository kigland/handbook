name: Deploy
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To push a branch
      pull-requests: write # To create a PR from that branch
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install latest mdbook
        run: |
          tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir mdbook
          curl -sSL $url | tar -xz --directory=./mdbook
          echo `pwd`/mdbook >> $GITHUB_PATH
      - name: Deploy GitHub Pages
        run: |
          # This assumes your book is in the root of your repository.
          # Just add a `cd` here if you need to change to another directory.
          mdbook build
          git worktree add gh-pages
          git config user.name "Deploy from CI"
          git config user.email ""
          cd gh-pages
          # Delete the ref to avoid keeping history.
          git update-ref -d refs/heads/gh-pages
          rm -rf *
          mv ../book/* .
          git add .
          git commit -m "Deploy $GITHUB_SHA to gh-pages"
          git push --force --set-upstream origin gh-pages
          
      - name: Install and Configure s3cmd
        run: |
          # Install s3cmd
          pip install s3cmd
          
          # Extract domain from endpoint URL (remove https:// if present)
          ENDPOINT=$(echo "${{ secrets.S3_ENDPOINT_URL }}" | sed 's/https:\/\///')
          
          # Create s3cmd config file with MIME type settings
          cat > ~/.s3cfg << EOF
          [default]
          access_key = ${{ secrets.S3_ACCESS_KEY }}
          secret_key = ${{ secrets.S3_SECRET_KEY }}
          host_base = ${ENDPOINT}
          host_bucket = ${ENDPOINT}
          use_https = True
          check_ssl_certificate = False
          check_ssl_hostname = False
          # Enable verbose output and progress meter
          verbose = True
          progress_meter = True
          # Enable proper MIME types detection
          guess_mime_type = True
          EOF
          
      - name: Deploy to S3-compatible storage with s3cmd
        run: |
          # Navigate to where the built files are
          cd gh-pages
          
          # Print info about deployment
          echo "Using s3cmd to upload to S3-compatible storage"
          echo "Bucket: ${S3_BUCKET_NAME_MASKED}"
          
          # Test bucket access
          echo "Testing bucket access..."
          if s3cmd ls s3://${{ secrets.S3_BUCKET_NAME }}/; then
            echo "✅ Bucket exists and is accessible"
          else
            echo "❌ Bucket does not exist or is not accessible"
            exit 1
          fi
          
          # First, remove all existing files in the bucket
          echo "Clearing existing files from bucket..."
          s3cmd del --recursive --force s3://${{ secrets.S3_BUCKET_NAME }}/
          
          # Upload all files first - this will use auto mime-type detection
          echo "Uploading files to S3-compatible storage..."
          s3cmd sync --verbose --progress \
            --exclude=".git/*" \
            --no-check-md5 \
            --delete-removed \
            --guess-mime-type \
            --add-header="Content-Disposition: inline" \
            ./ s3://${{ secrets.S3_BUCKET_NAME }}/
          
          # Set content types for specific file types to ensure proper handling
          echo "Setting content types for HTML files..."
          find . -name "*.html" | while read file; do
            rel_path=${file#./}
            echo "Setting content-type for: $rel_path"
            s3cmd modify --mime-type="text/html" \
              --add-header="Content-Disposition: inline" \
              s3://${{ secrets.S3_BUCKET_NAME }}/$rel_path
          done
          
          echo "Setting content types for CSS files..."
          find . -name "*.css" | while read file; do
            rel_path=${file#./}
            s3cmd modify --mime-type="text/css" \
              --add-header="Content-Disposition: inline" \
              s3://${{ secrets.S3_BUCKET_NAME }}/$rel_path
          done
          
          echo "Setting content types for JavaScript files..."
          find . -name "*.js" | while read file; do
            rel_path=${file#./}
            s3cmd modify --mime-type="application/javascript" \
              --add-header="Content-Disposition: inline" \
              s3://${{ secrets.S3_BUCKET_NAME }}/$rel_path
          done
            
          echo "Successfully deployed to S3-compatible storage"
        env:
          # Mask sensitive data in logs
          S3_BUCKET_NAME_MASKED: "${{ secrets.S3_BUCKET_NAME }}"
